#file: noinspection YAMLIncompatibleTypes
AWSTemplateFormatVersion: "2010-09-09"
Description: Main resource template for meet-up app.
Parameters:
  ProjectName:
    Type: String
    Description: The name of the project
    Default: meet-up
  VpcCidr:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Default: 10.0.0.0/16
    Description: The CIDR block of the VPC.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Main
        Parameters:
          - ProjectName
Resources:

  #---------------------------------------------------------------------
  # Network
  #---------------------------------------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref ProjectName
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ] ]
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              !Ref AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ] ]
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              !Ref AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-2
  AppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ] ]
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              !Ref AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-app-1
  AppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ] ]
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              !Ref AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-app-2
  DbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ] ]
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-db-1
  DbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ] ]
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-db-2
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  #  NatGateway1EIP:
  #    Type: AWS::EC2::EIP
  #    DependsOn: GatewayAttachment
  #    Properties:
  #      Domain: vpc
  #  NatGateway2EIP:
  #    Type: AWS::EC2::EIP
  #    DependsOn: GatewayAttachment
  #    Properties:
  #      Domain: vpc
  #  NatGateway1:
  #    Type: AWS::EC2::NatGateway
  #    Properties:
  #      AllocationId: !GetAtt NatGateway1EIP.AllocationId
  #      SubnetId: !Ref PublicSubnet1
  #  NatGateway2:
  #    Type: AWS::EC2::NatGateway
  #    Properties:
  #      AllocationId: !GetAtt NatGateway2EIP.AllocationId
  #      SubnetId: !Ref PublicSubnet2
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  #  PrivateRoute1:
  #    Type: AWS::EC2::Route
  #    Properties:
  #      RouteTableId: !Ref PrivateRouteTable1
  #      DestinationCidrBlock: 0.0.0.0/0
  #      NatGatewayId: !Ref NatGateway1
  AppSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnet1
      RouteTableId: !Ref PublicRouteTable
  DbSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DbSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  #  PrivateRoute2:
  #    Type: AWS::EC2::Route
  #    Properties:
  #      RouteTableId: !Ref PrivateRouteTable2
  #      DestinationCidrBlock: 0.0.0.0/0
  #      NatGatewayId: !Ref NatGateway2
  AppSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnet2
      RouteTableId: !Ref PublicRouteTable
  DbSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DbSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  #---------------------------------------------------------------------
  # ECS
  #---------------------------------------------------------------------

  EcrRepository:
    Type: AWS::ECR::Repository
  EcsCluster:
    Type: AWS::ECS::Cluster
  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPs request to the load balancer.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ApplicationLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
  TaskDefinitionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt [ ExecutionRole, Arn ]
      TaskRoleArn: !GetAtt [ TaskRole, Arn ]
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: test # todo use parameter
          Image: public.ecr.aws/nginx/nginx:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskDefinitionLogGroup
              awslogs-stream-prefix: test # todo use Container's name
              awslogs-region: !Ref AWS::Region
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Only allow traffics from Application Load Balancer Security Group.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      Cluster: !Ref EcsCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      HealthCheckGracePeriodSeconds: 60
      LoadBalancers:
        - ContainerName: test # todo use parameter
          ContainerPort: 80
          TargetGroupArn: !GetAtt [ TargetGroup, TargetGroupArn ]
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref AppSubnet1
            - !Ref AppSubnet2
          SecurityGroups:
            - !Ref ServiceSecurityGroup
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from ECS to RDS.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ServiceSecurityGroup
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro
      Engine: postgres
      EngineVersion: 16.1
      MasterUsername: postgres
      MasterUserPassword: postgres
      VPCSecurityGroups:
        - !Ref ServiceSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: My DB Subnet Group
      SubnetIds:
        - !Ref DbSubnet1
        - !Ref DbSubnet2

  #---------------------------------------------------------------------
  # Continuous Deployment
  #---------------------------------------------------------------------

  ArtifactStore:
    Type: AWS::S3::Bucket

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:*
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Resource:
                  - Fn::Sub:
                      - "arn:aws:s3:::${BucketName}"
                      - BucketName: !Ref ArtifactStore
                  - Fn::Sub:
                      - "arn:aws:s3:::${BucketName}/*"
                      - BucketName: !Ref ArtifactStore
              - Effect: Allow
                Action:
                  - Iam:PassRole
                Resource: "*" # Todo Can be further restricted.
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*" # Todo Can be further restricted.
              - Effect: Allow
                Action:
                  - elasticloadbalancing:*
                  - ec2:CreateSecurityGroup
                  - ec2:Describe*
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecs:*
                Resource:
                  Fn::Sub:
                    - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${EcsServiceName}"
                    - EcsServiceName: !Ref Service
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Sub "arn:aws:codestar-connection:${AWS::Region}:${AWS::AccountId}:connection/13941896-5902-45f8-9c16-a162f0c693e1"
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Statement:
              # Allow the CodeBuild to get all the versions of all the buckets.
              - Effect: Allow
                Action:
                  - s3:ListAllByBuckets
                  - s3:GetBucketVersioning
                Resource: "*"
              # Allow the CodeBuild to perform CRUD (Create, Read, Update, Delete) operations in the ArtifactStore bucket.
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  Fn::Sub:
                    - arn:aws:s3:::${BucketName}/*
                    - BucketName: !Ref ArtifactStore
              # Allow the CodeBuild to push Images to the EcrRepository in ECR.
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetBatchGetImage
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                Resource:
                  Fn::Sub: arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrRepository}
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              # Allow the CodeBuild to perform actions with AWS CLI
              - Effect: Allow
                Action:
                  - iam:GetUser
                Resource: "*"
              # Allow creating logs
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      #      BadgeEnabled: true todo later use
      Cache:
        Type: LOCAL
        Location: LOCAL
        Modes:
          - LOCAL_SOURCE_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: NODE_ENV
            Type: PLAINTEXT
            Value: production
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildRole
      Source:
        BuildSpec: ./infra/buildspec.yaml
        Type: CODEPIPELINE
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStore
        Type: S3
      RoleArn: !GetAtt [ PipelineRole, Arn ]
      PipelineType: V2
      Stages:
        - Name: Source
          Actions:
            - Name: GetSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                ConnectionArn: arn:aws:codestar-connections:us-west-2:211170425181:connection/13941896-5902-45f8-9c16-a162f0c693e1
                FullRepositoryId: f-lab-edu/meet-up
                BranchName: main
              RunOrder: 1
        #        - Name: ManualApproval # Dummy stage to test the previous stage.
        #          Actions:
        #            - Name: ManualApproval
        #              ActionTypeId:
        #                Category: Approval
        #                Owner: AWS
        #                Provider: Manual
        #                Version: 1
        - Name: Build
          Actions:
            - Name: BuildDockerImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1
